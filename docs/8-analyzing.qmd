---
title:  "Analyzing Stock Picks"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#404040;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 721.scss]
    incremental: true
---

## Overview

- Load a model and make predictions for new data.
- Rank stocks on predictions: best, next best, ...
- Important to interpret the model
  - What combinations of features does it like/dislike?
  - What industries does it like/dislike?

. . .

## Example

- Load model from last session

. . .

```p
from joblib import load
forest = load("forest2.joblib")
```

- Download [2022-01]{style="color:tomato; font-weight:bold;"} data as "data" (also get SIC code).

- Make predictions
 
. . .

```p
X = data[["roeq", "mom12m"]]
data["predict"] = forest.predict(X)
```
#

```{python}
from joblib import load 
forest = load("forest2.joblib")

from sqlalchemy import create_engine
import pymssql
import pandas as pd

server = "mssql-82792-0.cloudclusters.net:16272"
username = "user"
password = "RiceOwls1912" # paste password between quote marks
database = "ghz"

string = "mssql+pymssql://" + username + ":" + password + "@" + server + "/" + database

conn = create_engine(string).connect()

data = pd.read_sql(
    """
    select ticker, date, ret, roeq, mom12m, siccd
    from data
    where date='2022-01'
    """, 
    conn
)
data = data.dropna()

X = data[["roeq", "mom12m"]]
data["predict"] = forest.predict(X)
```

## Find the best stocks

. . .

Sort the stocks from best to worst

. . .

```p
data = data.sort_values(
  by="predict",
  ascending=False
)
data = data.reset_index(drop=True)
```

## Top 3

. . .

```p
data.head(3)
```

. . .

```{python}
data = data.sort_values(
  by="predict",
  ascending=False
)
data = data.reset_index(drop=True)
data.head(3)
```

## Bottom 3

. . .

```p
data.tail(3)
```

. . .

```{python}
data.tail(3)
```


## Characteristics of best stocks

- What is the model choosing?
- Many different ways to try to answer this.  Let's do this:
  - Standardize characteristics as percentile ranks, so min is 0, max is 1, median is 0.5, etc.
  - Create boxplots and histograms for top and bottom stocks.

. . .

```p
data["roeq"] = data.roeq.rank(pct=True)
data["mom12m"] = data.mom12m.rank(pct=True)
```

## Top 3 again

 . . .

```p
data.head(3)
```

. . .

```{python}
data["roeq"] = data.roeq.rank(pct=True)
data["mom12m"] = data.mom12m.rank(pct=True)
data.head(3)
```

## Bottom 3 again

 . . .

```p
data.tail(3)
```

. . .

```{python}
data.tail(3)
```

## ROEQ of top 100 and bottom 100

::: {.panel-tabset}

## Box Plots

```{python}
import plotly.graph_objects as go

top = data.iloc[:100]
bottom = data.iloc[-100:]

trace1 = go.Box(
  y=top.roeq,
  name="top"
)
trace2 = go.Box(
  y=bottom.roeq,
  name="bottom"
)
fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=420,
)

fig.show()
```

## Histograms

```{python}
top["type"] = "top"
bottom["type"] = "bottom"
data2 = pd.concat((top, bottom))

import plotly.express as px
fig = px.histogram(data2, x="roeq", color="type")
fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    width=1000,
    height=420,
)
fig.show()
```


:::

## MOM12M of top 100 and bottom 100

::: {.panel-tabset}

## Box Plots

```{python}
trace1 = go.Box(
  y=top.mom12m,
  name="top"
)
trace2 = go.Box(
  y=bottom.mom12m,
  name="bottom"
)
fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=420,
)

fig.show()
```

## Histograms

```{python}
fig = px.histogram(data2, x="mom12m", color="type")
fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    width=1000,
    height=420,
)
fig.show()
```

:::

## Industries

- Group 4-digit SIC codes into a manageable number of industries
- Example: [Fama-French 49 industries](ff49.xlsx)

## Industries of the top 100

. . .

```{python}
ff49 = pd.read_excel("ff49.xlsx", index_col=0)
def industry(sic):
  try:
    return ff49[(ff49.lower<=sic)&(sic<=ff49.upper)].index[0]
  except:
    return "Almost Nothing"
top["industry"] = top.siccd.map(industry)
counts = top.groupby("industry").ticker.count()
counts = counts.rename(index={"Almost Nothing": "Other"})
counts = counts.reset_index()
counts.columns = ["industry", "count"]

import plotly.express as px
fig = px.pie(counts, values="count", names="industry")

fig.update_layout(
    template="plotly_dark",
    font_size=20,
    width=1000,
    height=800,
)

fig.show()


```
