---
title:  "Features"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=120>
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [white, 722.scss]
    incremental: true
---

## Feature transformations

- Include products and squares.
- Transform to minimize outliers.
- Include products with macroeconomic variables.

## Products of variables

- Consider model $z = ax + by +cxy$
for features $x$ and $y$ and parameters $a$, $b$, and $c$.
- Can write as  $z = (a+cy)x + by$.
- The importance of $x$ depends on $y$ via $a+cy$.
- Symmetrically, the importance of $y$ depends on $x$.
- Including products with macro variables means that the importance of stock features can depend on macro variables.

## Squares


## Example macro variables

- Interest rates, interest rate changes, inflation rate, GNP growth, unemployment, unemployment change, ...
- Past market return
- Past returns of factor portfolios
- Past volatility or implied volatility from option prices (VIX)

## Example 

- roeq, mom12m, ret as before
- Get market return and use ret-mkt as the target.
- Include lagged mkt as a macro variable

## Market and lagged market

. . .

```{.p code-line-numbers="1-12|6|13"}
from pandas_datareader import DataReader as pdr

mkt = pdr(
  "F-F_Research_Data_Factors",
  "famafrench",
  start="2009-12",
  end="2017-12"
)

mkt = mkt[0] / 100
mkt.index = mkt.index.astype(str)
mkt["mkt"] = mkt["Mkt-RF"] + mkt["RF"]
mkt["lagmkt"] = mkt.mkt.shift()
```

## Transform features

- model from TransformedTargetRegressor and LinearRegressor as before

. . .

```{.p code-line-numbers="1-2|4-9|1-9"}
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

pipe = make_pipeline(
  QuantileTransformer(output_distribution="normal"),
  PolynomialFeatures(degree=2),
  QuantileTransformer(output_distribution="normal"),
  model
)
```

## Fit

. . .

```{.p}
X = df[["roeq", "mom12m", "lagmkt"]]
y = df.ret - df.mkt
pipe.fit(X, y)
```


```{python}
from sqlalchemy import create_engine
import pymssql
import pandas as pd

server = "mssql-82792-0.cloudclusters.net:16272"
username = "user"
password = "RiceOwls1912" 
database = "ghz"
string = "mssql+pymssql://" + username + ":" + password + "@" + server + "/" + database
conn = create_engine(string).connect()

df = pd.read_sql(
    """
    select date, ticker, ret, roeq, mom12m
    from data
    where date>='2010-01' and date<='2017-12'
    order by date, ticker
    """, 
    conn
)
df = df.dropna()
df = df.set_index("date")
```

```{python}
from pandas_datareader import DataReader as pdr

mkt = pdr(
  "F-F_Research_Data_Factors",
  "famafrench",
  start="2009-12",
  end="2017-12"
)

mkt = mkt[0] / 100
mkt.index = mkt.index.astype(str)
mkt["mkt"] = mkt["Mkt-RF"] + mkt["RF"]
mkt["lagmkt"] = mkt.mkt.shift()
df = df.join(mkt, how="left")
```

```{python}
from sklearn.preprocessing import QuantileTransformer
from sklearn.compose import TransformedTargetRegressor
from sklearn.linear_model import LinearRegression

model = TransformedTargetRegressor(
    transformer=QuantileTransformer(
      output_distribution="normal"
    ),
    regressor=LinearRegression()
)
```

```{python}
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

pipe = make_pipeline(
  QuantileTransformer(output_distribution="normal"),
  PolynomialFeatures(degree=2),
  QuantileTransformer(output_distribution="normal"),
  model
)

X = df[["roeq", "mom12m", "lagmkt"]]
y = df.ret - df.mkt
_ = pipe.fit(X, y)
```

