---
title:  "Exploratory Data Analysis"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 721.scss]
    incremental: true
---

## Data

- Monthly data in SQL database
- 100+ predictors following [Green, Hand, and Zhang, 2017](ghz.pdf)


## SQL 

- select ... from ...
- join ... on ...
- where ...
- order by ...

## Connect with python

```{.p}
from sqlalchemy import create_engine
import pymssql
import pandas as pd

server = "mssql-82792-0.cloudclusters.net:16272"
username = "user"
password = "" # paste password between quote marks
database = "ghz"
string = "mssql+pymssql://" + username + ":" + password + "@" + server + "/" + database
conn = create_engine(string).connect()
```

## Example: ROEQ  and mom12m in 2021-12

. . .

```{.p code-line-numbers="3-5|1-8|9"}
data = pd.read_sql(
    """
    select ticker, date, ret, roeq, mom12m
    from data
    where date='2021-12'
    """, 
    conn
)
data = data.dropna()
```

#

```p
data.info()
```

. . .

```{python}
from sqlalchemy import create_engine
import pymssql
import pandas as pd

server = "mssql-82792-0.cloudclusters.net:16272"
username = "user"
password = "RiceOwls1912" # paste password between quote marks
database = "ghz"

string = "mssql+pymssql://" + username + ":" + password + "@" + server + "/" + database

conn = create_engine(string).connect()

data = pd.read_sql(
    """
    select ticker, date, ret, roeq, mom12m
    from data
    where date='2021-12'
    """, 
    conn
)
data = data.dropna()
data.info()
```

## First few rows

. . .

```p
data.head(3)
```

. . .

```{python}
data.head(3)
```

## Summary statistics

. . .

```p
data[["roeq", "mom12m", "ret"]].describe().round(3)
```

. . .


```{python}
data[["roeq", "mom12m", "ret"]].describe().round(3)
```

## Regressions

. . .

::: {.panel-tabset}

## ROEQ

```{python}
import plotly.express as px
fig = px.scatter(
    data, 
    x="roeq", 
    y="ret", 
    trendline="ols",
    hover_data=dict(
        roeq=False,
        date=False,
        ret=False,
        mom12m=False,
        ticker=True
    ),
)

fig.update_traces(
    marker=dict(
        size=12,
        opacity=0.5
    )
)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=420,
)

fig.show()
```

## MOM12M

```{python}
fig = px.scatter(
    data, 
    x="mom12m", 
    y="ret", 
    trendline="ols",
    hover_data=dict(
        roeq=False,
        date=False,
        ret=False,
        mom12m=False,
        ticker=True
    ),
)

fig.update_traces(
    marker=dict(
        size=12,
        opacity=0.5
    )
)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=420,
)

fig.show()
```
:::

## Binned regressions

- Sort into groups based on explanatory variable
  - Percentiles of explanatory variable
  - Deciles of explanatory variable
- Compute means of explanatory and dependent variable in each group.
- When dependent variable = ret, mean is return of equally weighted portfolio.
- Regress dependent variable means on explanatory variable means.

#

::: {.panel-tabset}

## ROE 100

```{python}
import pandas as pd

data['roeqpct'] = pd.qcut(
    data.roeq, 
    100, 
    labels=range(1, 101)
)
x = data.groupby("roeqpct").roeq.mean()
y = data.groupby("roeqpct").ret.mean()
df = pd.concat((x,y), axis=1)
df.columns = ["roeq", "ret"]
fig = px.scatter(df, x="roeq", y="ret", trendline="ols")

fig.update_traces(
    marker=dict(
        size=12,
        opacity=0.5
    )
)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=460,
)

fig.show()
```

## ROE 10

```{python}
data['roeqpct'] = pd.qcut(
    data.roeq, 
    10, 
    labels=range(1, 11)
)
x = data.groupby("roeqpct").roeq.mean()
y = data.groupby("roeqpct").ret.mean()
df = pd.concat((x,y), axis=1)
df.columns = ["roeq", "ret"]
fig = px.scatter(df, x="roeq", y="ret", trendline="ols")

fig.update_traces(
    marker=dict(
        size=12,
    )
)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=460,
)

fig.show()
```

## MOM 100

```{python}
data['mom12mpct'] = pd.qcut(
    data.mom12m, 
    100, 
    labels=range(1, 101)
)
x = data.groupby("mom12mpct").mom12m.mean()
y = data.groupby("mom12mpct").ret.mean()
df = pd.concat((x,y), axis=1)
df.columns = ["mom12m", "ret"]
fig = px.scatter(df, x="mom12m", y="ret", trendline="ols")

fig.update_traces(
    marker=dict(
        size=12,
        opacity=0.5
    )
)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=460,
)

fig.show()
```

## MOM 10

```{python}
data['mom12mpct'] = pd.qcut(
    data.mom12m, 
    10, 
    labels=range(1, 11)
)
x = data.groupby("mom12mpct").mom12m.mean()
y = data.groupby("mom12mpct").ret.mean()
df = pd.concat((x,y), axis=1)
df.columns = ["mom12m", "ret"]
fig = px.scatter(df, x="mom12m", y="ret", trendline="ols")

fig.update_traces(
    marker=dict(
        size=12,
    )
)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=460,
)

fig.show()
```

:::

## Portfolio returns by group

- Average predictor values may not be important.
- We really want to know whether stocks with high values beat stocks with low values.
- Put the order of the predictor group (1 through 100 or 1 through 10) on the x-axis.

#

::: {.panel-tabset}

## ROE 100

```{python}
import pandas as pd

data['roeq_pct'] = pd.qcut(
    data.roeq, 
    100, 
    labels=range(1, 101)
)
df = data.groupby("roeq_pct").ret.mean()
df = df.reset_index()
df.columns = ["roeq_pct", "ret"]
df.roeq_pct = df.roeq_pct.astype(int)
fig = px.scatter(df, x="roeq_pct", y="ret", trendline="ols")

fig.update_traces(
    marker=dict(
        size=12,
    )
)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=460,
)

fig.show()
```

## ROE 10

```{python}
data['roeq_decile_'] = pd.qcut(
    data.roeq, 
    10, 
    labels=range(1, 11)
)
df = data.groupby("roeqpct").ret.mean()
df = df.reset_index()
df.columns = ["roeq_decile", "ret"]
df.roeq_decile = df.roeq_decile.astype(int)
fig = px.scatter(df, x="roeq_decile", y="ret", trendline="ols")

fig.update_traces(
    marker=dict(
        size=12,
    )
)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=460,
)

fig.show()
```

## MOM 100

```{python}
data['mom12mpct'] = pd.qcut(
    data.mom12m, 
    100, 
    labels=range(1, 101)
)
df = data.groupby("mom12mpct").ret.mean()
df = df.reset_index()
df.columns = ["mom12m_pct", "ret"]
df.mom12m_pct = df.mom12m_pct.astype(int)
fig = px.scatter(df, x="mom12m_pct", y="ret", trendline="ols")

fig.update_traces(
    marker=dict(
        size=12,
    )
)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=460,
)

fig.show()
```

## MOM 10

```{python}
data['mom12m_decile_'] = pd.qcut(
    data.mom12m, 
    10, 
    labels=range(1, 11)
)
df = data.groupby("mom12m_decile_").ret.mean()
df = df.reset_index()
df.columns = ["mom12m_decile", "ret"]
df.mom12m_decile = df.mom12m_decile.astype(int)
fig = px.scatter(df, x="mom12m_decile", y="ret", trendline="ols")

fig.update_traces(
    marker=dict(
        size=12,
    )
)

fig.update_layout(
    template="plotly_dark",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=460,
)

fig.show()
```

:::

